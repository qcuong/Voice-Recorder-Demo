apply plugin: 'com.android.application'
def NDK_LAME_DIR = 'src/main/jni'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.tranginc.trangnhe.voicerecorderdemo"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        sourceSets.main.jniLibs.srcDirs(NDK_LAME_DIR + '/libs')
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jni.srcDirs = ['src/main/jni/libmp3lame', 'src/main/libmp3lame']
        }
    }

    task ndkBuildLAME(type: Exec) {

        Properties properties = new Properties()

        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        def ndkDir = properties.getProperty('ndk.dir')

        commandLine "$ndkDir/ndk-build", '-B', '-C',
                file(NDK_LAME_DIR).absolutePath,
                'NDK_PROJECT_PATH=' + file(NDK_LAME_DIR).absolutePath,
                'APP_BUILD_SCRIPT=' + file(NDK_LAME_DIR + '/Android.mk').absolutePath,
                'NDK_APPLICATION_MK=' + file(NDK_LAME_DIR + '/Application.mk').absolutePath,
                '-j' + Runtime.runtime.availableProcessors()

        // Windows users change to: commandLine "$ndkDir\\ndk-build.cmd"... (".cmd" added)

    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuildLAME
    }
}




dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.1'
    testCompile 'junit:junit:4.12'
}
